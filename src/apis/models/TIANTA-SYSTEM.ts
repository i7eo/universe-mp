/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/current/user/getInfo": {
    post: operations["getInfoUsingPOST"];
  };
  "/current/user/getInfoRefresh": {
    post: operations["getInfoRefreshUsingPOST"];
  };
  "/current/user/inRole": {
    post: operations["inRoleUsingPOST"];
  };
  "/current/user/isAdmin": {
    post: operations["isAdminUsingPOST"];
  };
  "/current/user/isRole/{roleId}": {
    post: operations["isRoleUsingPOST"];
  };
  "/current/user/roles": {
    post: operations["rolesUsingPOST"];
  };
  "/current/user/roles/all": {
    post: operations["rolesAllUsingPOST"];
  };
  "/current/user/roles/{appId}": {
    post: operations["rolesByAppIdUsingPOST"];
  };
  "/current/user/sysMenu": {
    post: operations["sysMenuUsingPOST"];
  };
  "/error": {
    get: operations["handlerUsingGET"];
    put: operations["handlerUsingPUT"];
    post: operations["handlerUsingPOST"];
    delete: operations["handlerUsingDELETE"];
    options: operations["handlerUsingOPTIONS"];
    head: operations["handlerUsingHEAD"];
    patch: operations["handlerUsingPATCH"];
  };
  "/login/enter": {
    post: operations["enterUsingPOST"];
  };
  "/login/enterByCode": {
    post: operations["enterByCodeUsingPOST"];
  };
  "/login/forgetpwd/resetpwd": {
    post: operations["forgetPwdResetPwdUsingPOST"];
  };
  "/login/forgetpwd/sendCode/{phone}": {
    post: operations["forgetPwdSendCodeUsingPOST"];
  };
  "/login/forgetpwd/verify": {
    post: operations["forgetPwdVerifyUsingPOST"];
  };
  "/login/getKey": {
    post: operations["getKeyUsingPOST"];
  };
  "/login/out": {
    post: operations["outUsingPOST"];
  };
  "/login/sendCodeMsg/{phone}": {
    /** 返回一个5分钟内有效的token */
    post: operations["sendCodeUsingPOST"];
  };
  "/open/environment/pord": {
    get: operations["prodEnvironmentUsingGET"];
    put: operations["prodEnvironmentUsingPUT"];
    post: operations["prodEnvironmentUsingPOST"];
    delete: operations["prodEnvironmentUsingDELETE"];
    options: operations["prodEnvironmentUsingOPTIONS"];
    head: operations["prodEnvironmentUsingHEAD"];
    patch: operations["prodEnvironmentUsingPATCH"];
  };
  "/sys/acl/add": {
    post: operations["addUsingPOST"];
  };
  "/sys/acl/delete/{id}": {
    post: operations["deleteUsingPOST"];
  };
  "/sys/acl/idsByRole/{roleId}": {
    post: operations["idsByRoleUsingPOST"];
  };
  "/sys/acl/load/{id}": {
    post: operations["loadUsingPOST"];
  };
  "/sys/acl/mgtTree": {
    post: operations["mgtTreeUsingPOST"];
  };
  "/sys/acl/roleTree": {
    post: operations["roleTreeUsingPOST"];
  };
  "/sys/acl/update": {
    post: operations["updateUsingPOST"];
  };
  "/sys/cache/refreshAll": {
    post: operations["refreshAllUsingPOST"];
  };
  "/sys/customTableFiled/load": {
    post: operations["loadUsingPOST_1"];
  };
  "/sys/customTableFiled/save": {
    post: operations["saveUsingPOST"];
  };
  "/sys/data/acl/list": {
    post: operations["listUsingPOST"];
  };
  "/sys/data/acl/listByRole/{roleId}": {
    post: operations["listByRoleUsingPOST"];
  };
  "/sys/data/acl/updateLevel": {
    post: operations["updateLevelUsingPOST"];
  };
  "/sys/dict/type/add": {
    post: operations["addUsingPOST_1"];
  };
  "/sys/dict/type/delete/{id}": {
    post: operations["deleteUsingPOST_1"];
  };
  "/sys/dict/type/list": {
    post: operations["listUsingPOST_1"];
  };
  "/sys/dict/type/load/{id}": {
    post: operations["loadUsingPOST_2"];
  };
  "/sys/dict/type/update": {
    post: operations["updateUsingPOST_1"];
  };
  "/sys/dict/value/add": {
    post: operations["addUsingPOST_2"];
  };
  "/sys/dict/value/codeValueListMap": {
    post: operations["codeValueListMapUsingPOST"];
  };
  "/sys/dict/value/deleteBatch": {
    post: operations["deleteBatchUsingPOST"];
  };
  "/sys/dict/value/listByCode/{code}": {
    post: operations["listByCodeUsingPOST"];
  };
  "/sys/dict/value/listPager": {
    post: operations["listPagerUsingPOST"];
  };
  "/sys/dict/value/load/{id}": {
    post: operations["loadUsingPOST_3"];
  };
  "/sys/dict/value/nameMap": {
    post: operations["nameMapUsingPOST"];
  };
  "/sys/dict/value/nameMapByAppIds": {
    /** 有可能会存在某个应用使用了别的应用的字典的情况 */
    post: operations["nameMapByAppIdsUsingPOST"];
  };
  "/sys/dict/value/update": {
    post: operations["updateUsingPOST_2"];
  };
  "/sys/log/deleteAll/{appId}": {
    post: operations["deleteAllUsingPOST"];
  };
  "/sys/log/deleteBatch/{appId}": {
    post: operations["deleteBatchUsingPOST_1"];
  };
  "/sys/log/listPager/{appId}": {
    post: operations["listPagerUsingPOST_1"];
  };
  "/sys/log/load/{appId}/{id}": {
    post: operations["loadUsingPOST_4"];
  };
  "/sys/organization/add": {
    post: operations["addUsingPOST_3"];
  };
  "/sys/organization/addOrgUser/{orgId}": {
    post: operations["addOrgUserUsingPOST"];
  };
  "/sys/organization/delete/{id}": {
    post: operations["deleteUsingPOST_2"];
  };
  "/sys/organization/deleteOrgUser": {
    /** 实际上直接置空用户的机构，所以不需要机构id参数 */
    post: operations["deleteOrgUserUsingPOST"];
  };
  "/sys/organization/load/{id}": {
    post: operations["loadUsingPOST_5"];
  };
  "/sys/organization/loadList/{parentId}": {
    post: operations["loadListUsingPOST"];
  };
  "/sys/organization/loadListAll/{parentId}": {
    post: operations["loadListAllUsingPOST"];
  };
  "/sys/organization/loadMgtTree": {
    post: operations["loadMgtTreeUsingPOST"];
  };
  "/sys/organization/loadTree": {
    post: operations["loadTreeUsingPOST"];
  };
  "/sys/organization/nameMap": {
    post: operations["nameMapUsingPOST_1"];
  };
  "/sys/organization/update": {
    post: operations["updateUsingPOST_3"];
  };
  "/sys/report/getReportServerUrl": {
    get: operations["getReportServerUrlUsingGET"];
  };
  "/sys/role/add": {
    post: operations["addUsingPOST_4"];
  };
  "/sys/role/addRoleUser/{id}": {
    post: operations["addRoleUserUsingPOST"];
  };
  "/sys/role/delete/{id}": {
    post: operations["deleteUsingPOST_3"];
  };
  "/sys/role/deleteRoleUser/{id}": {
    post: operations["deleteRoleUserUsingPOST"];
  };
  "/sys/role/list": {
    post: operations["listUsingPOST_2"];
  };
  "/sys/role/load/{id}": {
    post: operations["loadUsingPOST_6"];
  };
  "/sys/role/queryRoleNamesByUserId/{userId}": {
    post: operations["queryRoleIdsByUserIdUsingPOST"];
  };
  "/sys/role/setRoleAcl/{id}": {
    post: operations["deleteRoleUserUsingPOST_1"];
  };
  "/sys/role/setRoleDataAcl/{id}": {
    post: operations["setRoleDataAclUsingPOST"];
  };
  "/sys/role/update": {
    post: operations["updateUsingPOST_4"];
  };
  "/sys/user/add": {
    post: operations["addUsingPOST_5"];
  };
  "/sys/user/changePwd": {
    post: operations["changePwdUsingPOST"];
  };
  "/sys/user/deleteBatch": {
    post: operations["deleteBatchUsingPOST_2"];
  };
  "/sys/user/listByOrg": {
    /** 不分页，前端自己想办法，此接口只用于系统管理 */
    post: operations["listByOrgUsingPOST"];
  };
  "/sys/user/listByRole": {
    /** 不分页，前端自己想办法，此接口只用于系统管理 */
    post: operations["listByRoleUsingPOST_1"];
  };
  "/sys/user/listExcludeDel": {
    /** 此接口用于选择器 */
    post: operations["listExcludeDelUsingPOST"];
  };
  "/sys/user/listExcludeDelByCurrUserCompany": {
    /** 此接口用于业务中 */
    post: operations["listExcludeDelByCurrentCompanyUsingPOST"];
  };
  "/sys/user/listExcludeDelByCurrentDept": {
    /** 此接口用于业务中 */
    post: operations["listExcludeDelByCurrentDeptUsingPOST"];
  };
  "/sys/user/listExcludeDelByCurrentDeptManager": {
    /** 此接口用于业务中 */
    post: operations["listExcludeDelByCurrentDeptManagerUsingPOST"];
  };
  "/sys/user/listExcludeDelByOrgs": {
    /** 此接口用于选择器 */
    post: operations["listExcludeDelByOrgsUsingPOST"];
  };
  "/sys/user/listExcludeDelByRoleInOrg/{roleId}/{orgId}": {
    /** 此接口用于选择器 */
    post: operations["listExcludeDelByRoleInOrgUsingPOST"];
  };
  "/sys/user/listExcludeDelByRoles": {
    /** 此接口用于选择器 */
    post: operations["listExcludeDelByRolesUsingPOST"];
  };
  "/sys/user/listPager": {
    post: operations["listPagerUsingPOST_2"];
  };
  "/sys/user/listRange": {
    post: operations["listRangeUsingPOST"];
  };
  "/sys/user/load/{id}": {
    post: operations["loadUsingPOST_7"];
  };
  "/sys/user/nameMap": {
    post: operations["nameMapUsingPOST_2"];
  };
  "/sys/user/nameMapRange": {
    post: operations["nameMapRangeUsingPOST"];
  };
  "/sys/user/resetPwd": {
    post: operations["resetPwdUsingPOST"];
  };
  "/sys/user/update": {
    post: operations["updateUsingPOST_5"];
  };
  "/sys/user/updateStatus/{status}": {
    post: operations["updateStatusUsingPOST"];
  };
  "/ttt/{name}": {
    post: operations["tttUsingPOST"];
  };
  "/tttt1": {
    post: operations["ttttUsingPOST"];
  };
  "/tttt2": {
    post: operations["tttt2UsingPOST"];
  };
}

export interface definitions {
  /** AclDto */
  AclDto: {
    /**
     * Format: int32
     * @description 是否允许非超级管理员授权，1允许，0不允许，必传不能为空
     */
    allowAuthz: number;
    /** @description 编码，type为3时才需要填，非必传 */
    code?: string;
    /** @description 图标，type为1、2时才需要填，非必传 */
    icon?: string;
    /** @description 主键主键，编辑时不能为空 */
    id?: string;
    /** @description 名称，必传不能为空 */
    name: string;
    /** @description 父id，必传不能为空 */
    parentId: string;
    /** @description 备注，非必传 */
    remark?: string;
    /** @description type为2时填前端view，type为3时填后台地址，非必传 */
    resource?: string;
    /**
     * Format: double
     * @description 顺序，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 状态 1->可用，0->不可用，必传不能为空
     */
    status: number;
    /**
     * Format: int32
     * @description 1:菜单组，2:菜单，3资源，必传不能为空
     */
    type: number;
  };
  /** AclTreeVo */
  AclTreeVo: {
    /**
     * Format: int32
     * @description 是否允许非超级管理员授权，1允许，0不允许
     */
    allowAuthz?: number;
    /**
     * Format: int32
     * @description 应用id
     */
    appId?: number;
    checked?: boolean;
    children?: { [key: string]: unknown }[];
    /** @description 编码，type为3时才需要填 */
    code?: string;
    expanded?: boolean;
    /** @description 图标，type为1、2时才需要填 */
    icon?: string;
    id?: { [key: string]: unknown };
    leaf?: boolean;
    name?: string;
    parentId?: { [key: string]: unknown };
    /** @description type为2时填前端view，type为3时填后台地址 */
    resource?: string;
    /** @description 功能列表，只有再给角色勾权限时才使用 */
    resourceList?: definitions["AclTreeVo"][];
    /**
     * Format: double
     * @description 顺序
     */
    seq?: number;
    /**
     * Format: int32
     * @description 状态 1->可用，0->不可用
     */
    status?: number;
    /**
     * Format: int32
     * @description 1:菜单组，2:菜单，3资源
     */
    type?: number;
  };
  /** AclVo */
  AclVo: {
    /**
     * Format: int32
     * @description 是否允许非超级管理员授权，1允许，0不允许，必传不能为空
     */
    allowAuthz: number;
    /** @description 编码，type为3时才需要填，非必传 */
    code?: string;
    /** @description 图标，type为1、2时才需要填，非必传 */
    icon?: string;
    /** @description 主键主键，编辑时不能为空 */
    id?: string;
    /** @description 名称，必传不能为空 */
    name: string;
    /** @description 父id，必传不能为空 */
    parentId: string;
    /** @description 备注，非必传 */
    remark?: string;
    /** @description type为2时填前端view，type为3时填后台地址，非必传 */
    resource?: string;
    /**
     * Format: double
     * @description 顺序，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 状态 1->可用，0->不可用，必传不能为空
     */
    status: number;
    /**
     * Format: int32
     * @description 1:菜单组，2:菜单，3资源，必传不能为空
     */
    type: number;
  };
  /** CurrentUserInfo */
  CurrentUserInfo: {
    /**
     * Format: int64
     * @description 用户id
     */
    id?: number;
    /** @description 用户姓名 */
    name?: string;
    /**
     * Format: int64
     * @description 用户机构id
     */
    organizationId?: number;
    /** @description 手机号 */
    phone?: string;
    /** @description 用户资源权限map */
    resourceMap?: { [key: string]: string };
  };
  /** CustomTableFiledDto */
  CustomTableFiledDto: {
    /** @description 模块， */
    module: string;
    /** @description 表格json，非必传 */
    tableJson?: string;
    /** @description 版本 */
    version: string;
  };
  /** CustomTableFiledQueryDto */
  CustomTableFiledQueryDto: {
    /** @description 模块， */
    module: string;
    /** @description 版本 */
    version: string;
  };
  /** CustomTableFiledVo */
  CustomTableFiledVo: {
    /**
     * Format: int32
     * @description 应用appid
     */
    appid?: number;
    /**
     * Format: date-time
     * @description 创建时间
     */
    createTime?: string;
    /**
     * Format: int64
     * @description 自增主键
     */
    id?: number;
    /** @description 模块 */
    module?: string;
    /** @description 表格json */
    tableJson?: string;
    /** @description 表格json */
    tableJsonConvert?: definitions["JsonNode"];
    /**
     * Format: date-time
     * @description 更新时间
     */
    updateTime?: string;
    /**
     * Format: int64
     * @description 创建人id
     */
    userId?: number;
    /** @description 版本 */
    version?: string;
  };
  /** DataAclListVo */
  DataAclListVo: {
    /**
     * Format: int32
     * @description 应用id
     */
    appId?: number;
    /** @description 权限模块标识 */
    code?: string;
    /**
     * Format: int32
     * @description 默认数据权限级别 1->自己 2->自己及下属 3->本小组 4->本部门 5->本公司,6->所有，7:自定义
     */
    defaultLevel?: number;
    /**
     * Format: int32
     * @description 是否可编辑 1->可编辑 0->不可编辑
     */
    editable?: number;
    /**
     * Format: int32
     * @description id
     */
    id?: number;
    /** @description 名称 */
    name?: string;
    /** @description 备注 */
    remark?: string;
    /**
     * Format: double
     * @description 顺序
     */
    seq?: number;
  };
  /** DataAclUpdateLevelDto */
  DataAclUpdateLevelDto: {
    /**
     * Format: int32
     * @description 默认数据权限级别 1->自己 2->自己及下属 3->本小组 4->本部门 5->本公司,6->所有，7:自定义
     */
    defaultLevel?: number;
    /**
     * Format: int32
     * @description id主键，必传不能为空
     */
    id?: number;
  };
  /** DictTypeDto */
  DictTypeDto: {
    /** @description code值，必传不能为空 */
    code: string;
    /**
     * Format: int64
     * @description id主键，编辑时不能为空
     */
    id?: number;
    /** @description 名称，必传不能为空 */
    name: string;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: double
     * @description 排序，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 状态 1->可用 0->不可用 2->已删除，必传不能为空
     */
    status: number;
  };
  /** DictTypeListVo */
  DictTypeListVo: {
    /**
     * Format: int32
     * @description appId
     */
    appId?: number;
    /** @description code值 */
    code?: string;
    /**
     * Format: int64
     * @description id
     */
    id?: number;
    /** @description 名称 */
    name?: string;
    /**
     * Format: double
     * @description 排序
     */
    seq?: number;
    /**
     * Format: int32
     * @description 状态 1->可用 0->不可用 2->已删除
     */
    status?: number;
    /**
     * Format: date-time
     * @description 最后一次更新时间
     */
    updateTime?: string;
  };
  /** DictTypeVo */
  DictTypeVo: {
    /** @description code值，必传不能为空 */
    code: string;
    /**
     * Format: int64
     * @description id主键，编辑时不能为空
     */
    id?: number;
    /** @description 名称，必传不能为空 */
    name: string;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: double
     * @description 排序，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 状态 1->可用 0->不可用 2->已删除，必传不能为空
     */
    status: number;
  };
  /** DictValueDto */
  DictValueDto: {
    /**
     * Format: int64
     * @description 主键id主键，编辑时不能为空
     */
    id?: number;
    /** @description 名称，必传不能为空 */
    name: string;
    /**
     * Format: double
     * @description 排序号，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 状态 1->可用 0->不可用 2->已删除，必传不能为空
     */
    status: number;
    /**
     * Format: int32
     * @description 类型，必传不能为空
     */
    typeId: number;
  };
  /** DictValueFilter */
  DictValueFilter: {
    /** @description 名称 */
    name?: string;
    /**
     * Format: int32
     * @description 状态, 非必传
     */
    status?: number;
    /**
     * Format: int64
     * @description 类型, 非必传
     */
    typeId: number;
  };
  /** DictValueListVo */
  DictValueListVo: {
    /**
     * Format: int32
     * @description appId
     */
    appId?: number;
    /**
     * Format: int64
     * @description 主键id
     */
    id?: number;
    /** @description 名称 */
    name?: string;
    /**
     * Format: double
     * @description 排序号
     */
    seq?: number;
    /**
     * Format: int32
     * @description 状态 1->可用 0->不可用 2->已删除
     */
    status?: number;
    /** @description 类型code */
    typeCode?: string;
    /**
     * Format: int32
     * @description 类型id
     */
    typeId?: number;
    /**
     * Format: date-time
     * @description 更新时间
     */
    updateTime?: string;
  };
  /** DictValueVo */
  DictValueVo: {
    /**
     * Format: int64
     * @description 主键id主键，编辑时不能为空
     */
    id?: number;
    /** @description 名称，必传不能为空 */
    name: string;
    /**
     * Format: double
     * @description 排序号，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 状态 1->可用 0->不可用 2->已删除，必传不能为空
     */
    status: number;
    /**
     * Format: int32
     * @description 类型，必传不能为空
     */
    typeId: number;
  };
  /** ForgetPwdDto */
  ForgetPwdDto: {
    /** @description 密码 */
    password: string;
    /** @description 账号，这里是手机号 */
    phone: string;
    /** @description token,5分钟内有效 */
    token: string;
  };
  /** JsonNode */
  JsonNode: { [key: string]: unknown };
  /** Log */
  Log: {
    /** Format: int32 */
    appId?: number;
    bizErrorCode?: string;
    /** Format: int64 */
    createBy?: number;
    createByName?: string;
    /** Format: date-time */
    createTime?: string;
    deviceInfo?: string;
    error?: boolean;
    errorDetails?: string;
    /** Format: int64 */
    execTimeMillis?: number;
    ip?: string;
    mongoId?: string;
    params?: string;
    rawPath?: string;
    resourceId?: string;
    resourceName?: string;
    resourcePath?: string;
  };
  /** LogFilter */
  LogFilter: {
    bizErrorCode?: string;
    /**
     * Format: int32
     * @description 创建人
     */
    createBy?: number;
    /**
     * Format: date-time
     * @description 结束时间
     */
    endTime?: string;
    /** @description 是否出错 */
    error?: boolean;
    /** @description 资源地址（左匹配） */
    searchValue?: string;
    /**
     * Format: date-time
     * @description 开始时间
     */
    startTime?: string;
  };
  /** LogListVo */
  LogListVo: {
    /**
     * Format: int32
     * @description 访问来源应用
     */
    appId?: number;
    /** @description 异常编码 */
    bizErrorCode?: string;
    /**
     * Format: int64
     * @description 创建人id
     */
    createBy?: number;
    /** @description 创建人姓名 */
    createByName?: string;
    /**
     * Format: date-time
     * @description 创建时间
     */
    createTime?: string;
    /** @description 设备信息 */
    deviceInfo?: string;
    /** @description 是否出错 */
    error?: boolean;
    /**
     * Format: int64
     * @description 耗时
     */
    execTimeMillis?: number;
    /** @description ip */
    ip?: string;
    /** @description id，主键 */
    mongoId?: string;
    /** @description 完整访问路径 */
    rawPath?: string;
    /** @description 访问模块名称 */
    resourceName?: string;
    /** @description 访问路径 */
    resourcePath?: string;
  };
  /** LoginCodeDto */
  LoginCodeDto: {
    /** @description 验证码 */
    code: string;
    /** @description 账号，这里是手机号 */
    phone: string;
    /** @description token,5分钟内有效 */
    token: string;
  };
  /** LoginDto */
  LoginDto: {
    /** @description 密钥id */
    keyId: string;
    /** @description 公钥加密后的密码 */
    password: string;
    /** @description 账号，这里是手机号 */
    phone: string;
  };
  /** LoginKeyVo */
  LoginKeyVo: {
    /** @description 密钥id */
    keyId?: string;
    /** @description 公钥 */
    publicKey?: string;
  };
  /** Map«string,List«DictValueListVo»» */
  "Map«string,List«DictValueListVo»»": { [key: string]: definitions["List"] };
  /** Map«string,string» */
  "Map«string,string»": { [key: string]: string };
  /** MockLoginDto */
  MockLoginDto: {
    sign?: string;
    /** Format: int64 */
    userId?: number;
  };
  /** OrgUserFilter */
  OrgUserFilter: {
    /**
     * Format: int64
     * @description 组织机构id，如果不传，则查询没有机构的用户
     */
    orgId?: number;
    /** @description 用户过滤 */
    userFilter: definitions["UserFilter"];
  };
  /** OrganizationDto */
  OrganizationDto: {
    /**
     * Format: int32
     * @description 启用/禁用 必传不能为空
     */
    enabled: number;
    /**
     * Format: int64
     * @description 机构id主键，编辑时不能为空
     */
    id?: number;
    /** @description 名称，必传不能为空 */
    name: string;
    /**
     * Format: int64
     * @description 上级id，新增时必传，更新时不传，不可修改
     */
    parentId?: number;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: double
     * @description 排序号，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 类型 1->公司，2->部门，3->组，新增时必传，更新时不传，不可修改
     */
    type?: number;
  };
  /** OrganizationTreeVo */
  OrganizationTreeVo: {
    checked?: boolean;
    children?: { [key: string]: unknown }[];
    /**
     * Format: int32
     * @description 启用/禁用
     */
    enabled?: number;
    expanded?: boolean;
    id?: { [key: string]: unknown };
    leaf?: boolean;
    /**
     * Format: int32
     * @description 机构层级
     */
    level?: number;
    name?: string;
    parentId?: { [key: string]: unknown };
    /**
     * Format: double
     * @description 排序号
     */
    seq?: number;
    /**
     * Format: int32
     * @description 类型 1->公司，2->部门，3->组
     */
    type?: number;
  };
  /** OrganizationVo */
  OrganizationVo: {
    /**
     * Format: int32
     * @description 启用/禁用 必传不能为空
     */
    enabled: number;
    /**
     * Format: int64
     * @description 机构id主键，编辑时不能为空
     */
    id?: number;
    /** @description 名称，必传不能为空 */
    name: string;
    /**
     * Format: int64
     * @description 上级id，新增时必传，更新时不传，不可修改
     */
    parentId?: number;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: double
     * @description 排序号，必传不能为空
     */
    seq: number;
    /**
     * Format: int32
     * @description 类型 1->公司，2->部门，3->组，新增时必传，更新时不传，不可修改
     */
    type?: number;
  };
  /** PagerQueryBodyModel */
  PagerQueryBodyModel: {
    dir?: string;
    /** Format: int32 */
    limit?: number;
    /** Format: int32 */
    page?: number;
    sort?: string;
  };
  /** PagerQueryBody«DictValueFilter» */
  "PagerQueryBody«DictValueFilter»": {
    filter?: definitions["DictValueFilter"];
    model?: definitions["PagerQueryBodyModel"];
  };
  /** PagerQueryBody«LogFilter» */
  "PagerQueryBody«LogFilter»": {
    filter?: definitions["LogFilter"];
    model?: definitions["PagerQueryBodyModel"];
  };
  /** PagerQueryBody«UserFilter» */
  "PagerQueryBody«UserFilter»": {
    filter?: definitions["UserFilter"];
    model?: definitions["PagerQueryBodyModel"];
  };
  /** Pager«DictValueListVo» */
  "Pager«DictValueListVo»": {
    /** Format: int32 */
    currentPage?: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
    isFirstPage?: boolean;
    isLastPage?: boolean;
    navigatePageNumbers?: number[];
    /** Format: int32 */
    navigatePages?: number;
    /** Format: int32 */
    pageCount?: number;
    /** Format: int32 */
    pageSize?: number;
    result?: definitions["DictValueListVo"][];
    /** Format: int64 */
    total?: number;
  };
  /** Pager«LogListVo» */
  "Pager«LogListVo»": {
    /** Format: int32 */
    currentPage?: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
    isFirstPage?: boolean;
    isLastPage?: boolean;
    navigatePageNumbers?: number[];
    /** Format: int32 */
    navigatePages?: number;
    /** Format: int32 */
    pageCount?: number;
    /** Format: int32 */
    pageSize?: number;
    result?: definitions["LogListVo"][];
    /** Format: int64 */
    total?: number;
  };
  /** Pager«UserListVo» */
  "Pager«UserListVo»": {
    /** Format: int32 */
    currentPage?: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
    isFirstPage?: boolean;
    isLastPage?: boolean;
    navigatePageNumbers?: number[];
    /** Format: int32 */
    navigatePages?: number;
    /** Format: int32 */
    pageCount?: number;
    /** Format: int32 */
    pageSize?: number;
    result?: definitions["UserListVo"][];
    /** Format: int64 */
    total?: number;
  };
  /** ResultEntity«AclVo» */
  "ResultEntity«AclVo»": {
    code?: string;
    data?: definitions["AclVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Collection«UserRole»» */
  "ResultEntity«Collection«UserRole»»": {
    code?: string;
    data?: definitions["UserRole"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Collection«string»» */
  "ResultEntity«Collection«string»»": {
    code?: string;
    data?: string[];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«CurrentUserInfo» */
  "ResultEntity«CurrentUserInfo»": {
    code?: string;
    data?: definitions["CurrentUserInfo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«CustomTableFiledVo» */
  "ResultEntity«CustomTableFiledVo»": {
    code?: string;
    data?: definitions["CustomTableFiledVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«DictTypeVo» */
  "ResultEntity«DictTypeVo»": {
    code?: string;
    data?: definitions["DictTypeVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«DictValueVo» */
  "ResultEntity«DictValueVo»": {
    code?: string;
    data?: definitions["DictValueVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«AclTreeVo»» */
  "ResultEntity«List«AclTreeVo»»": {
    code?: string;
    data?: definitions["AclTreeVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«DataAclListVo»» */
  "ResultEntity«List«DataAclListVo»»": {
    code?: string;
    data?: definitions["DataAclListVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«DictTypeListVo»» */
  "ResultEntity«List«DictTypeListVo»»": {
    code?: string;
    data?: definitions["DictTypeListVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«DictValueListVo»» */
  "ResultEntity«List«DictValueListVo»»": {
    code?: string;
    data?: definitions["DictValueListVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«OrganizationTreeVo»» */
  "ResultEntity«List«OrganizationTreeVo»»": {
    code?: string;
    data?: definitions["OrganizationTreeVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«RoleDataAclListVo»» */
  "ResultEntity«List«RoleDataAclListVo»»": {
    code?: string;
    data?: definitions["RoleDataAclListVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«RoleListVo»» */
  "ResultEntity«List«RoleListVo»»": {
    code?: string;
    data?: definitions["RoleListVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«UserListVo»» */
  "ResultEntity«List«UserListVo»»": {
    code?: string;
    data?: definitions["UserListVo"][];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«List«string»» */
  "ResultEntity«List«string»»": {
    code?: string;
    data?: string[];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«LoginKeyVo» */
  "ResultEntity«LoginKeyVo»": {
    code?: string;
    data?: definitions["LoginKeyVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Log» */
  "ResultEntity«Log»": {
    code?: string;
    data?: definitions["Log"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Map«string,List«DictValueListVo»»» */
  "ResultEntity«Map«string,List«DictValueListVo»»»": {
    code?: string;
    data?: { [key: string]: definitions["DictValueListVo"][] };
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Map«string,object»» */
  "ResultEntity«Map«string,object»»": {
    code?: string;
    data?: { [key: string]: unknown };
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Map«string,string»» */
  "ResultEntity«Map«string,string»»": {
    code?: string;
    data?: { [key: string]: string };
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«OrganizationVo» */
  "ResultEntity«OrganizationVo»": {
    code?: string;
    data?: definitions["OrganizationVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Pager«DictValueListVo»» */
  "ResultEntity«Pager«DictValueListVo»»": {
    code?: string;
    data?: definitions["Pager«DictValueListVo»"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Pager«LogListVo»» */
  "ResultEntity«Pager«LogListVo»»": {
    code?: string;
    data?: definitions["Pager«LogListVo»"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«Pager«UserListVo»» */
  "ResultEntity«Pager«UserListVo»»": {
    code?: string;
    data?: definitions["Pager«UserListVo»"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«RoleVo» */
  "ResultEntity«RoleVo»": {
    code?: string;
    data?: definitions["RoleVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«UserVo» */
  "ResultEntity«UserVo»": {
    code?: string;
    data?: definitions["UserVo"];
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«boolean» */
  "ResultEntity«boolean»": {
    code?: string;
    data?: boolean;
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«object» */
  "ResultEntity«object»": {
    code?: string;
    data?: { [key: string]: unknown };
    msg?: string;
    success?: boolean;
  };
  /** ResultEntity«string» */
  "ResultEntity«string»": {
    code?: string;
    data?: string;
    msg?: string;
    success?: boolean;
  };
  /** RoleDataAclListVo */
  RoleDataAclListVo: {
    /** @description 数据权限编码 */
    dataAclCode?: string;
    /**
     * Format: int32
     * @description 数据权限默认级别
     */
    dataAclDefaultLevel?: number;
    /**
     * Format: int32
     * @description 数据权限id
     */
    dataAclId?: number;
    /** @description 数据权限name */
    dataAclName?: string;
    /** @description 扩展字段，如果级别为7(自定义)必填，内容为机构id列表，以字符串的形式传递，例如 '[10,20,30]' */
    expand?: string;
    /**
     * Format: int32
     * @description 级别
     */
    level?: number;
    /** @description 角色id */
    roleId?: string;
  };
  /** RoleDto */
  RoleDto: {
    /**
     * Format: int32
     * @description 是否可被授权  0->不能 1->能，必传不能为空
     */
    allowAuthz: number;
    /** @description 角色id主键 */
    id?: string;
    /** @description 角色名，必传不能为空 */
    name: string;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: double
     * @description 顺序，必传不能为空
     */
    seq: number;
  };
  /** RoleListVo */
  RoleListVo: {
    /**
     * Format: int32
     * @description 是否可被授权  0->不能 1->能
     */
    allowAuthz?: number;
    /**
     * Format: int32
     * @description 应用_id
     */
    appId?: number;
    /** @description 角色id */
    id?: string;
    /** @description 角色名 */
    name?: string;
    /**
     * Format: double
     * @description 顺序
     */
    seq?: number;
    /**
     * Format: int32
     * @description 角色的类型 1 ->系统自带角色 2-> 自定义角色
     */
    type?: number;
  };
  /** RoleUserFilter */
  RoleUserFilter: {
    /** @description 角色id, 必传 */
    roleId: string;
    /** @description 如果为true，则查询非当前角色的用户, 必传 */
    roleNotIn: boolean;
    /** @description 用户过滤 */
    userFilter: definitions["UserFilter"];
  };
  /** RoleVo */
  RoleVo: {
    /**
     * Format: int32
     * @description 是否可被授权  0->不能 1->能，必传不能为空
     */
    allowAuthz: number;
    /** @description 角色id主键 */
    id?: string;
    /** @description 角色名，必传不能为空 */
    name: string;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: double
     * @description 顺序，必传不能为空
     */
    seq: number;
  };
  /** UserChangePwdDto */
  UserChangePwdDto: {
    /** @description 新密码，必传不能为空 */
    newPassword?: string;
    /** @description 旧密码，必传不能为空 */
    oldPassword?: string;
    /**
     * Format: int64
     * @description 用户id，必传不能为空
     */
    userId?: number;
  };
  /** UserDto */
  UserDto: {
    /**
     * Format: int64
     * @description 用户id主键，编辑时不能为空
     */
    id?: number;
    /** @description 身份证号，非必传 */
    idCard?: string;
    /** @description 邮箱，非必传 */
    mail?: string;
    /** @description 用户名称，必传不能为空 */
    name?: string;
    /**
     * Format: int64
     * @description 所属机构id，前端传过来必传
     */
    organizationId?: number;
    /** @description 手机号,手机号登录可用作登录，必传不能为空 */
    phone?: string;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: int32
     * @description 性别 1 ->男 2 ->女，必传不能为空
     */
    sex?: number;
    /**
     * Format: int32
     * @description 状态 1 ->正常 0 ->冻结 2-> 删除，必传不能为空
     */
    status?: number;
    /**
     * Format: int64
     * @description 上级直属领导，非必传
     */
    supLeader?: number;
  };
  /** UserFilter */
  UserFilter: {
    /** @description 用户名称, 非必填 */
    name?: string;
    /** @description 所属机构名称, 非必填 */
    orgName?: string;
    /** @description 手机号, 非必填 */
    phone?: string;
    /** @description 聚合查询框, 非必填 */
    searchValue?: string;
    /**
     * Format: int32
     * @description 性别, 非必填
     */
    sex?: number;
    /**
     * Format: int32
     * @description 状态 0 ->正常 1 ->冻结 2-> 删除, 非必填
     */
    status?: number;
  };
  /** UserListVo */
  UserListVo: {
    /**
     * Format: int64
     * @description 用户id
     */
    id?: number;
    /** @description 用户名称 */
    name?: string;
    /**
     * Format: int64
     * @description 所属机构id
     */
    organizationId?: number;
    /** @description 所属机构Name */
    organizationName?: string;
    /** @description 手机号,手机号登录可用作登录 */
    phone?: string;
    /**
     * Format: int32
     * @description 性别 1 ->男 2 ->女
     */
    sex?: number;
    /**
     * Format: int32
     * @description 状态 1 ->正常 0 ->冻结 2-> 删除
     */
    status?: number;
    /**
     * Format: int64
     * @description 上级直属领导
     */
    supLeader?: number;
    /** @description 上级直属领导Name */
    supLeaderName?: string;
    /**
     * Format: date-time
     * @description 最后一次更新时间
     */
    updateTime?: string;
  };
  /** UserRole */
  UserRole: {
    /** Format: int32 */
    appId?: number;
    roleId?: string;
  };
  /** UserVo */
  UserVo: {
    /**
     * Format: int64
     * @description 用户id主键，编辑时不能为空
     */
    id?: number;
    /** @description 身份证号，非必传 */
    idCard?: string;
    /** @description 邮箱，非必传 */
    mail?: string;
    /** @description 用户名称，必传不能为空 */
    name?: string;
    /**
     * Format: int64
     * @description 所属机构id，前端传过来必传
     */
    organizationId?: number;
    /** @description 手机号,手机号登录可用作登录，必传不能为空 */
    phone?: string;
    /** @description 备注，非必传 */
    remark?: string;
    /**
     * Format: int32
     * @description 性别 1 ->男 2 ->女，必传不能为空
     */
    sex?: number;
    /**
     * Format: int32
     * @description 状态 1 ->正常 0 ->冻结 2-> 删除，必传不能为空
     */
    status?: number;
    /**
     * Format: int64
     * @description 上级直属领导，非必传
     */
    supLeader?: number;
  };
}

export interface operations {
  getInfoUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«CurrentUserInfo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getInfoRefreshUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«CurrentUserInfo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  inRoleUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** roleIds */
        roleIds: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«boolean»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  isAdminUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«boolean»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  isRoleUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** roleId */
        roleId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«boolean»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  rolesUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Collection«string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  rolesAllUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Collection«UserRole»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  rolesByAppIdUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** appId */
        appId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Collection«string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  sysMenuUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«AclTreeVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  handlerUsingGET: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  handlerUsingPUT: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  handlerUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  handlerUsingDELETE: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  handlerUsingOPTIONS: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  handlerUsingHEAD: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  handlerUsingPATCH: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  enterUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** LoginDto对象 */
        loginDto: definitions["LoginDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  enterByCodeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** LoginVerifyCodeDto对象 */
        loginCodeDto: definitions["LoginCodeDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  forgetPwdResetPwdUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** body */
        forgetPwdDto: definitions["ForgetPwdDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«boolean»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  forgetPwdSendCodeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 接收验证码的手机 */
        phone: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«string»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  forgetPwdVerifyUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** body */
        loginCodeDto: definitions["LoginCodeDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«boolean»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getKeyUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«LoginKeyVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  outUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 返回一个5分钟内有效的token */
  sendCodeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 接收验证码的手机 */
        phone: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«string»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  prodEnvironmentUsingGET: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,object»»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  prodEnvironmentUsingPUT: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,object»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  prodEnvironmentUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,object»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  prodEnvironmentUsingDELETE: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,object»»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  prodEnvironmentUsingOPTIONS: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,object»»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  prodEnvironmentUsingHEAD: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,object»»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  prodEnvironmentUsingPATCH: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,object»»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  addUsingPOST: {
    parameters: {
      body: {
        /** AclDto对象 */
        aclDto: definitions["AclDto"];
      };
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  idsByRoleUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 角色id */
        roleId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«AclVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  mgtTreeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«AclTreeVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  roleTreeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«AclTreeVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPOST: {
    parameters: {
      body: {
        /** AclDto对象 */
        aclDto: definitions["AclDto"];
      };
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  refreshAllUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** param对象 */
        dto: definitions["CustomTableFiledQueryDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«CustomTableFiledVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  saveUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** CustomTableFiledDto对象 */
        customTableFiledDto: definitions["CustomTableFiledDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«DataAclListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listByRoleUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** roleId */
        roleId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«RoleDataAclListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateLevelUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** 更新数据权限默认级别对象 */
        dataAclUpdateLevelDto: definitions["DataAclUpdateLevelDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** DictTypeDto对象 */
        dictTypeDto: definitions["DictTypeDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«DictTypeListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«DictTypeVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** DictTypeDto对象 */
        dictTypeDto: definitions["DictTypeDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** DictValueDto对象 */
        dictValueDto: definitions["DictValueDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  codeValueListMapUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** codes */
        codes: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,List«DictValueListVo»»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteBatchUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** id数组 */
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listByCodeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** code */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«DictValueListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listPagerUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** 分页过滤条件body */
        body?: definitions["PagerQueryBody«DictValueFilter»"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Pager«DictValueListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST_3: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«DictValueVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  nameMapUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 有可能会存在某个应用使用了别的应用的字典的情况 */
  nameMapByAppIdsUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** appIds */
        appIds: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** DictValueDto对象 */
        dictValueDto: definitions["DictValueDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteAllUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** appId */
        appId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteBatchUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** appId */
        appId: number;
      };
      body: {
        /** id数组 */
        ids: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listPagerUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** appId */
        appId: number;
      };
      body: {
        /** 分页过滤条件body */
        body?: definitions["PagerQueryBody«LogFilter»"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Pager«LogListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST_4: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** appId */
        appId: number;
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Log»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_3: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** OrganizationDto对象 */
        organizationDto: definitions["OrganizationDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addOrgUserUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 机构id */
        orgId: number;
      };
      body: {
        /** 用户id列表 */
        userIds: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 实际上直接置空用户的机构，所以不需要机构id参数 */
  deleteOrgUserUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** 用户id列表 */
        userIds: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST_5: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«OrganizationVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadListUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** parentId */
        parentId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«OrganizationTreeVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadListAllUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** parentId */
        parentId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«OrganizationTreeVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadMgtTreeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«OrganizationTreeVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadTreeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«OrganizationTreeVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  nameMapUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPOST_3: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** OrganizationDto对象 */
        organizationDto: definitions["OrganizationDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getReportServerUrlUsingGET: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      query: {
        /** 报表路径 */
        reportlet: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«string»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_4: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** RoleDto对象 */
        roleDto: definitions["RoleDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addRoleUserUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 角色id */
        id: string;
      };
      body: {
        /** 用户id列表 */
        userIds: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingPOST_3: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteRoleUserUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 角色id */
        id: string;
      };
      body: {
        /** 用户id列表 */
        userIds: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«RoleListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST_6: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«RoleVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryRoleIdsByUserIdUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 用户id */
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteRoleUserUsingPOST_1: {
    parameters: {
      body: {
        /** 权限id列表 */
        aclIds: string[];
      };
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 角色id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  setRoleDataAclUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 角色id */
        id: string;
      };
      body: {
        /** 数据权限id列表 */
        roleDataAclList: definitions["RoleDataAclListVo"][];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPOST_4: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** RoleDto对象 */
        roleDto: definitions["RoleDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_5: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** UserDto对象 */
        userDto: definitions["UserDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  changePwdUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** UserChangePwdDto对象 */
        dto: definitions["UserChangePwdDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteBatchUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** id数组 */
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 不分页，前端自己想办法，此接口只用于系统管理 */
  listByOrgUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** filter */
        filter?: definitions["OrgUserFilter"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 不分页，前端自己想办法，此接口只用于系统管理 */
  listByRoleUsingPOST_1: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** filter */
        filter?: definitions["RoleUserFilter"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 此接口用于选择器 */
  listExcludeDelUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 此接口用于业务中 */
  listExcludeDelByCurrentCompanyUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 此接口用于业务中 */
  listExcludeDelByCurrentDeptUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 此接口用于业务中 */
  listExcludeDelByCurrentDeptManagerUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 此接口用于选择器 */
  listExcludeDelByOrgsUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** orgId数组 */
        orgIds: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 此接口用于选择器 */
  listExcludeDelByRoleInOrgUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** 机构id */
        orgId: number;
        /** 角色id */
        roleId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** 此接口用于选择器 */
  listExcludeDelByRolesUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** roleId数组 */
        roleIds: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listPagerUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** 分页过滤条件body */
        body?: definitions["PagerQueryBody«UserFilter»"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Pager«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  listRangeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** id数组 */
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«List«UserListVo»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loadUsingPOST_7: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«UserVo»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  nameMapUsingPOST_2: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  nameMapRangeUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** ids */
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«Map«string,string»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  resetPwdUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** id数组 */
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPOST_5: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** UserDto对象 */
        userDto: definitions["UserDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateStatusUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      body: {
        /** id数组 */
        ids: number[];
      };
      path: {
        /** 状态 */
        status: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["ResultEntity«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  tttUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
      path: {
        /** name */
        name: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  ttttUsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  tttt2UsingPOST: {
    parameters: {
      header: {
        /** appId */
        ai?: string;
        /** deviceId */
        di?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
}

export interface external {}
